apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

android {
    compileSdkVersion compileSdk_version
    buildToolsVersion buildtools_version

    defaultConfig {
        minSdkVersion minSdk_version
        targetSdkVersion targetSdk_version
        versionName version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        consumerProguardFiles 'consumer-rules.pro'
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka"

    configuration {
        moduleName = 'data'
        reportUndocumented = true
        platform = "JVM"
        sourceRoot {
            path = "src/main"
        }
        jdkVersion = 8

        perPackageOption {
            prefix = "kotlin"
            skipDeprecated = false
            reportUndocumented = true
            includeNonPublic = false
        }
    }
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: dokka) {
    from "$buildDir/dokka"
    archiveClassifier = 'javadoc'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutine_version"

    // Test
    androidTestImplementation "androidx.core:core-ktx:$corektx_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    androidTestImplementation "androidx.test.ext:junit:$test_ext_version"
    androidTestImplementation "androidx.test:rules:${test_rules_version}"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core_version"
    androidTestImplementation "androidx.test.espresso:espresso-remote:$espresso_remote_version"
    androidTestUtil "androidx.test:orchestrator:$test_orchestrator_version"
}

afterEvaluate {
    publishing {
        publications {
            releaseHarmony(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId = 'com.frybits.harmony'
                artifactId = 'harmony'
                version = version_name

                artifact sourcesJar {
                    archiveClassifier = 'sources'
                }

                artifact javadocJar {
                    archiveClassifier = 'javadoc'
                }

                pom.withXml { pom ->
                    def root = asNode()
                    root.appendNode('name', 'Harmony')
                    root.appendNode('description', 'A process-safe SharedPreferences implementation')
                    root.appendNode('url', 'https://github.com/pablobaxter/Harmony')
                    def license = root.appendNode('licenses').appendNode('license')
                    license.appendNode('name', 'Apache License, Version 2.0')
                    license.appendNode('url', 'https://opensource.org/licenses/Apache-2.0')
                    def developer = root.appendNode('developers').appendNode('developer')
                    developer.appendNode('id', 'soaboz')
                    developer.appendNode('name', 'Pablo Baxter')
                    developer.appendNode('email', 'pablo@frybits.com')
                    def scm = root.appendNode('scm')
                    scm.appendNode('connection', 'scm:git:git://github.com/pablobaxter/Harmony.git')
                    scm.appendNode('developerConnection', 'git:ssh://github.com/pablobaxter/Harmony.git')
                    scm.appendNode('url', 'https://github.com/pablobaxter/Harmony')
                }
            }
        }
    }
}

bintray {
    //Gets local.properties info
    Properties properties = new Properties()
    def propertiesFile = project.rootProject.file('local.properties')
    if (propertiesFile.exists()) {
        properties.load(propertiesFile.newDataInputStream())
    }

    //Assigns credentials
    user = properties.getProperty('bintray.user') ?: System.getenv('BINTRAY_USER')
    key = properties.getProperty('bintray.apiKey') ?: System.getenv('BINTRAY_API_KEY')

    //Only interested in the JVM for now
    //Only want the Android AARs
    publications = ['releaseHarmony']

    // Default: false. Whether to run this as dry-run, without deploying
    dryRun = false
    // Default: false. Whether to override version artifacts already published
    override = false
    // Default: false. Whether version should be auto published after an upload
    publish = true

    pkg {
        repo = 'Harmony' // the name of the repository you created on Bintray
        name = 'com.frybits.harmony' // the name of the package you created inside it
        desc = 'A process-safe SharedPreferences implementation'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/pablobaxter/Harmony.git'
        githubRepo = 'pablobaxter/Harmony' //Optional Github repository
        version {
            name = version_name
            released = new Date()
            vcsTag = version_name
        }
    }
}
